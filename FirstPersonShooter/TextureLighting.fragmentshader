#version 330 core

// input data
in vec3 position_worldspace;
in vec3 normal_worldspace;
in vec2 TexCoord;

uniform vec3 LightPosition_worldspace[4];
uniform vec3 LightColor[4];

uniform vec3 EyePosition_worldspace;
uniform vec3 ambientLight;
uniform sampler2D myTextureSampler;


// Ouput data
out vec3 color;


vec3 CalculateLight();

void main()
{

	vec3 textureColor = texture( myTextureSampler, TexCoord ).rgb;
	vec3 lightingColor = CalculateLight();
	//vec3 light_source_color = vec3(1,0.7433,0.539); // sun or moon
	color = textureColor*lightingColor;//*light_source_color;
}

vec3 CalculateLight()
{

vec3 diffuseLight = vec3(0.0);
vec3 specularLight = vec3(0.0); 
 for(int i = 0 ; i < 4 ; i++)
   {
	// Diffuse light calculations.
	vec3 lightVector = normalize(LightPosition_worldspace[i] - position_worldspace);
	float brightness = dot(lightVector,normal_worldspace);
	brightness = clamp(brightness,0,1);
	diffuseLight = diffuseLight + vec3(brightness,brightness,brightness)*LightColor[i];
	
	//Specular light calculations.
	vec3 reflectedLightVector = reflect(-lightVector,normal_worldspace);
	vec3 eyeDirectionVector = normalize(EyePosition_worldspace - position_worldspace);
	float specularity = dot(reflectedLightVector,eyeDirectionVector);
	specularity = clamp(specularity,0,1);
	float specularExponent = 50;
	specularity = pow(specularity,specularExponent);
    specularLight = specularLight + vec3(specularity,specularity,specularity);//*LightColor[i]; 
   }
    diffuseLight = clamp(diffuseLight,0,1);
    specularLight = clamp(specularLight,0,1);

	vec3 lightColor = ambientLight + diffuseLight + specularLight;
	return lightColor;
}